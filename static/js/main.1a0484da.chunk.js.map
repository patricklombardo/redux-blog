{"version":3,"sources":["logo.svg","components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","console","log","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1a0484da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postActions'\n\nclass Posts extends Component {\n  componentWillMount() {\n    this.props.fetchPosts();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.newPost) {\n      this.props.posts.unshift(nextProps.newPost);\n    }\n  }\n\n  render() {\n    const postItems = this.props.posts.map(post => (\n      <div key={post.id}>\n        <h3>{post.title}</h3>\n        <p>{post.body}</p>\n      </div>\n    ))\n    return (\n      <div>\n        <h1>Posts</h1>\n        { postItems }\n      </div>\n    )\n  }\n}\n\nPosts.propTypes = {\n  fetchPosts: PropTypes.func.isRequired,\n  posts: PropTypes.array.isRequired,\n  newPost: PropTypes.object\n};\n\nconst mapStateToProps = state => ({\n  posts: state.posts.items,\n  newPost: state.posts.item\n});\n\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\n","import { FETCH_POSTS, NEW_POST } from './types'\n\nexport const fetchPosts = () => dispatch => {\n  // Dispatches FETCH_POSTS to the reducer\n  // dispatch is a resolver in a promise\n  // call dispatch whenever we want to send data to the store\n  fetch('http://jsonplaceholder.typicode.com/posts')\n  .then(res => res.json())\n  .then(posts => dispatch({\n    type: FETCH_POSTS,\n    payload: posts\n  }));\n  }\n\n  export const createPost = (post) => dispatch => {\n    console.log(\"action called\")\n    fetch('http://jsonplaceholder.typicode.com/posts', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    })\n      .then(res => res.json())\n      .then(post => dispatch({\n        type: NEW_POST,\n        payload: post\n      }));\n    }","export const FETCH_POSTS = 'FETCH_POSTS'\nexport const NEW_POST = 'NEW_POST'\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createPost } from '../actions/postActions';\n\nclass PostForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      body: ''\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const post = {\n      title: this.state.title,\n      body: this.state.body\n    };\n\n    this.props.createPost(post);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Add Post</h1>\n        <form onSubmit={this.onSubmit}>\n          <label>\n            <div>\n              <label>Title: </label><br />\n              <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title}/>\n            </div>\n            <div>\n              <label>Body: </label><br />\n              <textarea name=\"body\" value={this.state.body} onChange={this.onChange} />\n            </div>\n            <br />\n            <button type=\"submit\">Submit</button>\n          </label>\n        </form>\n      </div>\n    )\n  }\n}\n\nPostForm.propTypes = {\n  createPost: PropTypes.func.isRequired\n}\n\nexport default connect(null, { createPost })(PostForm);\n","import { FETCH_POSTS, NEW_POST } from '../actions/types'\n\nconst initialState = {\n  items: [], // represents initial array\n  item: {}, // represents single post when we get the response back\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      console.log('reducer')\n      return {\n        ...state,\n        items: action.payload\n      }\n      case NEW_POST:\n        return {\n          ...state,\n          item: action.payload\n        }\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport postReducer from './postReducer'\n\nexport default combineReducers({\n  posts: postReducer\n})","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/index';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer, \n  initialState, \n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Posts from './components/Posts';\nimport PostForm from './components/Postform';\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <PostForm />\n        <Posts />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}