{"ast":null,"code":"import _defineProperty from \"/Users/plomba327/Desktop/learning/reduxexample/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { FETCH_POSTS, NEW_POST } from '../actions/types';\nconst initialState = {\n  items: [],\n  // represents initial array\n  item: {} // represents single post when we get the response back\n\n};\n\nconst postReducer = function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_POSTS:\n      return _objectSpread({}, state, {\n        items: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default postReducer;","map":{"version":3,"sources":["/Users/plomba327/Desktop/learning/reduxexample/src/reducers/postReducer.js"],"names":["FETCH_POSTS","NEW_POST","initialState","items","item","postReducer","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,kBAAtC;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AACR;AACXC,EAAAA,IAAI,EAAE,EAFa,CAET;;AAFS,CAArB;;AAKA,MAAMC,WAAW,GAAG,UAASC,KAAK,GAAGJ,YAAjB,EAA+BK,MAA/B,EAAuC;AACzD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKR,WAAL;AACE,+BACKM,KADL;AAEEH,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAFhB;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVD;;AAYA,eAAeD,WAAf","sourcesContent":["import { FETCH_POSTS, NEW_POST } from '../actions/types'\n\nconst initialState = {\n  items: [], // represents initial array\n  item: {}, // represents single post when we get the response back\n}\n\nconst postReducer = function(state = initialState, action) {\n  switch(action.type) {\n    case FETCH_POSTS:\n      return {\n        ...state,\n        items: action.payload\n      }\n    default:\n      return state;\n  }\n}\n\nexport default postReducer"]},"metadata":{},"sourceType":"module"}